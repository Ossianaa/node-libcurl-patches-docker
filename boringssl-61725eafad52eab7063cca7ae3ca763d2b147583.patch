diff --git a/include/openssl/ssl.h b/include/openssl/ssl.h
index b0abe116d..ca44d29f3 100644
--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -5606,6 +5606,9 @@ OPENSSL_EXPORT int SSL_CTX_set1_curves_list(SSL_CTX *ctx, const char *curves);
 // SSL_set1_curves_list calls |SSL_set1_groups_list|.
 OPENSSL_EXPORT int SSL_set1_curves_list(SSL *ssl, const char *curves);
 
+OPENSSL_EXPORT int SSL_CTX_set_ciphersuites(SSL_CTX* ctx, char* str);
+
+OPENSSL_EXPORT int SSL_CTX_set_extension_permutation(SSL_CTX* ctx, char* str);
 // TLSEXT_nid_unknown is a constant used in OpenSSL for
 // |SSL_get_negotiated_group| to return an unrecognized group. BoringSSL never
 // returns this value, but we define this constant for compatibility.
diff --git a/include/openssl/tls1.h b/include/openssl/tls1.h
index 60301885a..c2d80c70f 100644
--- a/include/openssl/tls1.h
+++ b/include/openssl/tls1.h
@@ -181,6 +181,7 @@ extern "C" {
 #define TLS1_AD_NO_APPLICATION_PROTOCOL 120
 #define TLS1_AD_ECH_REQUIRED 121  // draft-ietf-tls-esni-13
 
+#define TLSEXT_TYPE_record_size_limit 28
 // ExtensionType values from RFC 6066
 #define TLSEXT_TYPE_server_name 0
 #define TLSEXT_TYPE_status_request 5
diff --git a/ssl/extensions.cc b/ssl/extensions.cc
index ce908118d..9a38d3c65 100644
--- a/ssl/extensions.cc
+++ b/ssl/extensions.cc
@@ -397,7 +397,7 @@ static const uint16_t kVerifySignatureAlgorithms[] = {
     SSL_SIGN_RSA_PKCS1_SHA512,
 
     // For now, SHA-1 is still accepted but least preferable.
-    SSL_SIGN_RSA_PKCS1_SHA1,
+    //SSL_SIGN_RSA_PKCS1_SHA1,
 };
 
 // kSignSignatureAlgorithms is the default list of supported signature
@@ -421,8 +421,8 @@ static const uint16_t kSignSignatureAlgorithms[] = {
     SSL_SIGN_RSA_PKCS1_SHA512,
 
     // If the peer supports nothing else, sign with SHA-1.
-    SSL_SIGN_ECDSA_SHA1,
-    SSL_SIGN_RSA_PKCS1_SHA1,
+    //SSL_SIGN_ECDSA_SHA1,
+    //SSL_SIGN_RSA_PKCS1_SHA1,
 };
 
 static Span<const uint16_t> tls12_get_verify_sigalgs(const SSL_HANDSHAKE *hs) {
@@ -1136,20 +1136,20 @@ static bool ext_ocsp_add_serverhello(SSL_HANDSHAKE *hs, CBB *out) {
 static bool ext_npn_add_clienthello(const SSL_HANDSHAKE *hs, CBB *out,
                                     CBB *out_compressible,
                                     ssl_client_hello_type_t type) {
-  const SSL *const ssl = hs->ssl;
-  if (ssl->ctx->next_proto_select_cb == NULL ||
-      // Do not allow NPN to change on renegotiation.
-      ssl->s3->initial_handshake_complete ||
-      // NPN is not defined in DTLS or TLS 1.3.
-      SSL_is_dtls(ssl) || hs->min_version >= TLS1_3_VERSION ||
-      type == ssl_client_hello_inner) {
-    return true;
-  }
-
-  if (!CBB_add_u16(out, TLSEXT_TYPE_next_proto_neg) ||
-      !CBB_add_u16(out, 0 /* length */)) {
-    return false;
-  }
+  //const SSL *const ssl = hs->ssl;
+  //if (ssl->ctx->next_proto_select_cb == NULL ||
+  //    // Do not allow NPN to change on renegotiation.
+  //    ssl->s3->initial_handshake_complete ||
+  //    // NPN is not defined in DTLS or TLS 1.3.
+  //    SSL_is_dtls(ssl) || hs->min_version >= TLS1_3_VERSION ||
+  //    type == ssl_client_hello_inner) {
+  //  return true;
+  //}
+
+  //if (!CBB_add_u16(out, TLSEXT_TYPE_next_proto_neg) ||
+  //    !CBB_add_u16(out, 0 /* length */)) {
+  //  return false;
+  //}
 
   return true;
 }
@@ -1935,7 +1935,6 @@ static bool ext_pre_shared_key_add_clienthello(const SSL_HANDSHAKE *hs,
   // Fill in a placeholder zero binder of the appropriate length. It will be
   // computed and filled in later after length prefixes are computed.
   size_t binder_len = EVP_MD_size(ssl_session_get_digest(ssl->session.get()));
-
   CBB contents, identity, ticket, binders, binder;
   if (!CBB_add_u16(out, TLSEXT_TYPE_pre_shared_key) ||
       !CBB_add_u16_length_prefixed(out, &contents) ||
@@ -2557,39 +2556,39 @@ static bool ext_supported_groups_parse_clienthello(SSL_HANDSHAKE *hs,
 //
 // https://tools.ietf.org/html/rfc8446#section-4.2.4
 
-static bool ext_certificate_authorities_add_clienthello(
-    const SSL_HANDSHAKE *hs, CBB *out, CBB *out_compressible,
-    ssl_client_hello_type_t type) {
-  if (ssl_has_CA_names(hs->config)) {
-    CBB ca_contents;
-    if (!CBB_add_u16(out, TLSEXT_TYPE_certificate_authorities) ||  //
-        !CBB_add_u16_length_prefixed(out, &ca_contents) ||         //
-        !ssl_add_CA_names(hs, &ca_contents) ||                     //
-        !CBB_flush(out)) {
-      return false;
-    }
-  }
-  return true;
-}
-
-static bool ext_certificate_authorities_parse_clienthello(SSL_HANDSHAKE *hs,
-                                                          uint8_t *out_alert,
-                                                          CBS *contents) {
-  if (contents == NULL) {
-    return true;
-  }
-
-  if (CBS_len(contents) == 0) {
-    return false;
-  }
-
-  hs->ca_names = SSL_parse_CA_list(hs->ssl, out_alert, contents);
-  if (!hs->ca_names) {
-    return false;
-  }
-
-  return true;
-}
+//static bool ext_certificate_authorities_add_clienthello(
+//    const SSL_HANDSHAKE *hs, CBB *out, CBB *out_compressible,
+//    ssl_client_hello_type_t type) {
+//  if (ssl_has_CA_names(hs->config)) {
+//    CBB ca_contents;
+//    if (!CBB_add_u16(out, TLSEXT_TYPE_certificate_authorities) ||  //
+//        !CBB_add_u16_length_prefixed(out, &ca_contents) ||         //
+//        !ssl_add_CA_names(hs, &ca_contents) ||                     //
+//        !CBB_flush(out)) {
+//      return false;
+//    }
+//  }
+//  return true;
+//}
+
+//static bool ext_certificate_authorities_parse_clienthello(SSL_HANDSHAKE *hs,
+//                                                          uint8_t *out_alert,
+//                                                          CBS *contents) {
+//  if (contents == NULL) {
+//    return true;
+//  }
+//
+//  if (CBS_len(contents) == 0) {
+//    return false;
+//  }
+//
+//  hs->ca_names = SSL_parse_CA_list(hs->ssl, out_alert, contents);
+//  if (!hs->ca_names) {
+//    return false;
+//  }
+//
+//  return true;
+//}
 
 
 // QUIC Transport Parameters
@@ -2786,6 +2785,24 @@ static bool ext_quic_transport_params_add_serverhello_legacy(SSL_HANDSHAKE *hs,
 static bool ext_delegated_credential_add_clienthello(
     const SSL_HANDSHAKE *hs, CBB *out, CBB *out_compressible,
     ssl_client_hello_type_t type) {
+    CBB contents, data;
+    static const uint16_t signature_hash_algorithms[] = {
+    SSL_SIGN_ECDSA_SECP256R1_SHA256, SSL_SIGN_ECDSA_SECP384R1_SHA384,
+    SSL_SIGN_ECDSA_SECP521R1_SHA512, SSL_SIGN_ECDSA_SHA1 };
+    if (!CBB_add_u16(out, TLSEXT_TYPE_delegated_credential) ||
+            !CBB_add_u16_length_prefixed(out, &contents) ||
+            !CBB_add_u16_length_prefixed(&contents, &data)) {
+        return false;
+    }
+    
+    for (const uint16_t alg : signature_hash_algorithms) {
+        if (!CBB_add_u16(&data, alg)) {
+            return false;
+        }
+    }
+    if (!CBB_flush(out)) {
+        return false;
+    }
   return true;
 }
 
@@ -2978,12 +2995,12 @@ static bool ext_alps_add_clienthello_impl(const SSL_HANDSHAKE *hs, CBB *out,
   return CBB_flush(out_compressible);
 }
 
-static bool ext_alps_add_clienthello(const SSL_HANDSHAKE *hs, CBB *out,
-                                     CBB *out_compressible,
-                                     ssl_client_hello_type_t type) {
-  return ext_alps_add_clienthello_impl(hs, out, out_compressible, type,
-                                       /*use_new_codepoint=*/true);
-}
+//static bool ext_alps_add_clienthello(const SSL_HANDSHAKE *hs, CBB *out,
+//                                     CBB *out_compressible,
+//                                     ssl_client_hello_type_t type) {
+//  return ext_alps_add_clienthello_impl(hs, out, out_compressible, type,
+//                                       /*use_new_codepoint=*/true);
+//}
 
 static bool ext_alps_add_clienthello_old(const SSL_HANDSHAKE *hs, CBB *out,
                                          CBB *out_compressible,
@@ -3023,11 +3040,12 @@ static bool ext_alps_parse_serverhello_impl(SSL_HANDSHAKE *hs,
   return true;
 }
 
-static bool ext_alps_parse_serverhello(SSL_HANDSHAKE *hs, uint8_t *out_alert,
-                                       CBS *contents) {
-  return ext_alps_parse_serverhello_impl(hs, out_alert, contents,
-                                         /*use_new_codepoint=*/true);
-}
+//static bool ext_alps_parse_serverhello(SSL_HANDSHAKE *hs,
+//                                       uint8_t *out_alert,
+//                                       CBS *contents) {
+//  return ext_alps_parse_serverhello_impl(hs, out_alert, contents,
+//                                         /*use_new_codepoint=*/true);
+//}
 
 static bool ext_alps_parse_serverhello_old(SSL_HANDSHAKE *hs,
                                            uint8_t *out_alert, CBS *contents) {
@@ -3069,9 +3087,9 @@ static bool ext_alps_add_serverhello_impl(SSL_HANDSHAKE *hs, CBB *out,
   return true;
 }
 
-static bool ext_alps_add_serverhello(SSL_HANDSHAKE *hs, CBB *out) {
-  return ext_alps_add_serverhello_impl(hs, out, /*use_new_codepoint=*/true);
-}
+//static bool ext_alps_add_serverhello(SSL_HANDSHAKE *hs, CBB *out) {
+//  return ext_alps_add_serverhello_impl(hs, out, /*use_new_codepoint=*/true);
+//}
 
 static bool ext_alps_add_serverhello_old(SSL_HANDSHAKE *hs, CBB *out) {
   return ext_alps_add_serverhello_impl(hs, out, /*use_new_codepoint=*/false);
@@ -3133,194 +3151,223 @@ bool ssl_negotiate_alps(SSL_HANDSHAKE *hs, uint8_t *out_alert,
   return true;
 }
 
+
+static bool record_size_limit_add_clienthello(const SSL_HANDSHAKE* hs, CBB* out,
+    CBB* out_compressible,
+    ssl_client_hello_type_t type) {
+    CBB data;
+    const uint16_t data_ = 0x4001;
+    if (!CBB_add_u16(out, TLSEXT_TYPE_record_size_limit) ||
+        !CBB_add_u16_length_prefixed(out, &data) || !CBB_add_u16(&data, data_) ||
+        !CBB_flush(out)) {
+        return false;
+    }
+    return true;
+}
+
+static bool record_size_limit_parse_serverhello(SSL_HANDSHAKE* hs,
+    uint8_t* out_alert,
+    CBS* contents) {
+    return true;
+}
+
+static bool record_size_limit_parse_clienthello(SSL_HANDSHAKE* hs,
+    uint8_t* out_alert,
+    CBS* contents) {
+    return true;
+}
+
+static bool record_size_limit_add_serverhello(SSL_HANDSHAKE* hs, CBB* out) {
+    return true;
+}
 // kExtensions contains all the supported extensions.
 static const struct tls_extension kExtensions[] = {
-    {
-        TLSEXT_TYPE_server_name,
-        ext_sni_add_clienthello,
-        ext_sni_parse_serverhello,
-        ext_sni_parse_clienthello,
-        ext_sni_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_encrypted_client_hello,
-        ext_ech_add_clienthello,
-        ext_ech_parse_serverhello,
-        ext_ech_parse_clienthello,
-        ext_ech_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_extended_master_secret,
-        ext_ems_add_clienthello,
-        ext_ems_parse_serverhello,
-        ext_ems_parse_clienthello,
-        ext_ems_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_renegotiate,
-        ext_ri_add_clienthello,
-        ext_ri_parse_serverhello,
-        ext_ri_parse_clienthello,
-        ext_ri_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_supported_groups,
-        ext_supported_groups_add_clienthello,
-        ext_supported_groups_parse_serverhello,
-        ext_supported_groups_parse_clienthello,
-        dont_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_ec_point_formats,
-        ext_ec_point_add_clienthello,
-        ext_ec_point_parse_serverhello,
-        ext_ec_point_parse_clienthello,
-        ext_ec_point_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_session_ticket,
-        ext_ticket_add_clienthello,
-        ext_ticket_parse_serverhello,
-        // Ticket extension client parsing is handled in ssl_session.c
-        ignore_parse_clienthello,
-        ext_ticket_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_application_layer_protocol_negotiation,
-        ext_alpn_add_clienthello,
-        ext_alpn_parse_serverhello,
-        // ALPN is negotiated late in |ssl_negotiate_alpn|.
-        ignore_parse_clienthello,
-        ext_alpn_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_status_request,
-        ext_ocsp_add_clienthello,
-        ext_ocsp_parse_serverhello,
-        ext_ocsp_parse_clienthello,
-        ext_ocsp_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_signature_algorithms,
-        ext_sigalgs_add_clienthello,
-        forbid_parse_serverhello,
-        ext_sigalgs_parse_clienthello,
-        dont_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_next_proto_neg,
-        ext_npn_add_clienthello,
-        ext_npn_parse_serverhello,
-        ext_npn_parse_clienthello,
-        ext_npn_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_certificate_timestamp,
-        ext_sct_add_clienthello,
-        ext_sct_parse_serverhello,
-        ext_sct_parse_clienthello,
-        ext_sct_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_channel_id,
-        ext_channel_id_add_clienthello,
-        ext_channel_id_parse_serverhello,
-        ext_channel_id_parse_clienthello,
-        ext_channel_id_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_srtp,
-        ext_srtp_add_clienthello,
-        ext_srtp_parse_serverhello,
-        ext_srtp_parse_clienthello,
-        ext_srtp_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_key_share,
-        ext_key_share_add_clienthello,
-        forbid_parse_serverhello,
-        ignore_parse_clienthello,
-        dont_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_psk_key_exchange_modes,
-        ext_psk_key_exchange_modes_add_clienthello,
-        forbid_parse_serverhello,
-        ext_psk_key_exchange_modes_parse_clienthello,
-        dont_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_early_data,
-        ext_early_data_add_clienthello,
-        ext_early_data_parse_serverhello,
-        ext_early_data_parse_clienthello,
-        ext_early_data_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_supported_versions,
-        ext_supported_versions_add_clienthello,
-        forbid_parse_serverhello,
-        ignore_parse_clienthello,
-        dont_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_cookie,
-        ext_cookie_add_clienthello,
-        forbid_parse_serverhello,
-        ignore_parse_clienthello,
-        dont_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_quic_transport_parameters,
-        ext_quic_transport_params_add_clienthello,
-        ext_quic_transport_params_parse_serverhello,
-        ext_quic_transport_params_parse_clienthello,
-        ext_quic_transport_params_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_quic_transport_parameters_legacy,
-        ext_quic_transport_params_add_clienthello_legacy,
-        ext_quic_transport_params_parse_serverhello_legacy,
-        ext_quic_transport_params_parse_clienthello_legacy,
-        ext_quic_transport_params_add_serverhello_legacy,
-    },
-    {
-        TLSEXT_TYPE_cert_compression,
-        cert_compression_add_clienthello,
-        cert_compression_parse_serverhello,
-        cert_compression_parse_clienthello,
-        cert_compression_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_delegated_credential,
-        ext_delegated_credential_add_clienthello,
-        forbid_parse_serverhello,
-        ext_delegated_credential_parse_clienthello,
-        dont_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_application_settings,
-        ext_alps_add_clienthello,
-        ext_alps_parse_serverhello,
-        // ALPS is negotiated late in |ssl_negotiate_alpn|.
-        ignore_parse_clienthello,
-        ext_alps_add_serverhello,
-    },
-    {
-        TLSEXT_TYPE_application_settings_old,
-        ext_alps_add_clienthello_old,
-        ext_alps_parse_serverhello_old,
-        // ALPS is negotiated late in |ssl_negotiate_alpn|.
-        ignore_parse_clienthello,
-        ext_alps_add_serverhello_old,
-    },
-    {
-        TLSEXT_TYPE_certificate_authorities,
-        ext_certificate_authorities_add_clienthello,
-        forbid_parse_serverhello,
-        ext_certificate_authorities_parse_clienthello,
-        dont_add_serverhello,
-    },
+  {
+    TLSEXT_TYPE_server_name,
+    ext_sni_add_clienthello,
+    ext_sni_parse_serverhello,
+    ext_sni_parse_clienthello,
+    ext_sni_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_encrypted_client_hello,
+    ext_ech_add_clienthello,
+    ext_ech_parse_serverhello,
+    ext_ech_parse_clienthello,
+    ext_ech_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_extended_master_secret,
+    ext_ems_add_clienthello,
+    ext_ems_parse_serverhello,
+    ext_ems_parse_clienthello,
+    ext_ems_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_renegotiate,
+    ext_ri_add_clienthello,
+    ext_ri_parse_serverhello,
+    ext_ri_parse_clienthello,
+    ext_ri_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_supported_groups,
+    ext_supported_groups_add_clienthello,
+    ext_supported_groups_parse_serverhello,
+    ext_supported_groups_parse_clienthello,
+    dont_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_ec_point_formats,
+    ext_ec_point_add_clienthello,
+    ext_ec_point_parse_serverhello,
+    ext_ec_point_parse_clienthello,
+    ext_ec_point_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_session_ticket,
+    ext_ticket_add_clienthello,
+    ext_ticket_parse_serverhello,
+    // Ticket extension client parsing is handled in ssl_session.c
+    ignore_parse_clienthello,
+    ext_ticket_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_application_layer_protocol_negotiation,
+    ext_alpn_add_clienthello,
+    ext_alpn_parse_serverhello,
+    // ALPN is negotiated late in |ssl_negotiate_alpn|.
+    ignore_parse_clienthello,
+    ext_alpn_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_status_request,
+    ext_ocsp_add_clienthello,
+    ext_ocsp_parse_serverhello,
+    ext_ocsp_parse_clienthello,
+    ext_ocsp_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_signature_algorithms,
+    ext_sigalgs_add_clienthello,
+    forbid_parse_serverhello,
+    ext_sigalgs_parse_clienthello,
+    dont_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_next_proto_neg,
+    ext_npn_add_clienthello,
+    ext_npn_parse_serverhello,
+    ext_npn_parse_clienthello,
+    ext_npn_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_certificate_timestamp,
+    ext_sct_add_clienthello,
+    ext_sct_parse_serverhello,
+    ext_sct_parse_clienthello,
+    ext_sct_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_channel_id,
+    ext_channel_id_add_clienthello,
+    ext_channel_id_parse_serverhello,
+    ext_channel_id_parse_clienthello,
+    ext_channel_id_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_srtp,
+    ext_srtp_add_clienthello,
+    ext_srtp_parse_serverhello,
+    ext_srtp_parse_clienthello,
+    ext_srtp_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_key_share,
+    ext_key_share_add_clienthello,
+    forbid_parse_serverhello,
+    ignore_parse_clienthello,
+    dont_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_psk_key_exchange_modes,
+    ext_psk_key_exchange_modes_add_clienthello,
+    forbid_parse_serverhello,
+    ext_psk_key_exchange_modes_parse_clienthello,
+    dont_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_early_data,
+    ext_early_data_add_clienthello,
+    ext_early_data_parse_serverhello,
+    ext_early_data_parse_clienthello,
+    ext_early_data_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_supported_versions,
+    ext_supported_versions_add_clienthello,
+    forbid_parse_serverhello,
+    ignore_parse_clienthello,
+    dont_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_cookie,
+    ext_cookie_add_clienthello,
+    forbid_parse_serverhello,
+    ignore_parse_clienthello,
+    dont_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_quic_transport_parameters,
+    ext_quic_transport_params_add_clienthello,
+    ext_quic_transport_params_parse_serverhello,
+    ext_quic_transport_params_parse_clienthello,
+    ext_quic_transport_params_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_quic_transport_parameters_legacy,
+    ext_quic_transport_params_add_clienthello_legacy,
+    ext_quic_transport_params_parse_serverhello_legacy,
+    ext_quic_transport_params_parse_clienthello_legacy,
+    ext_quic_transport_params_add_serverhello_legacy,
+  },
+  {
+    TLSEXT_TYPE_cert_compression,
+    cert_compression_add_clienthello,
+    cert_compression_parse_serverhello,
+    cert_compression_parse_clienthello,
+    cert_compression_add_serverhello,
+  },
+  {
+    TLSEXT_TYPE_delegated_credential,
+    ext_delegated_credential_add_clienthello,
+    forbid_parse_serverhello,
+    ext_delegated_credential_parse_clienthello,
+    dont_add_serverhello,
+  },
+  //{
+  //  TLSEXT_TYPE_application_settings,
+  //  ext_alps_add_clienthello,
+  //  ext_alps_parse_serverhello,
+  //  // ALPS is negotiated late in |ssl_negotiate_alpn|.
+  //  ignore_parse_clienthello,
+  //  ext_alps_add_serverhello,
+  //},
+  {
+    TLSEXT_TYPE_application_settings_old,
+    ext_alps_add_clienthello_old,
+    ext_alps_parse_serverhello_old,
+    // ALPS is negotiated late in |ssl_negotiate_alpn|.
+    ignore_parse_clienthello,
+    ext_alps_add_serverhello_old,
+  },
+  {
+    TLSEXT_TYPE_record_size_limit,
+    record_size_limit_add_clienthello,
+    record_size_limit_parse_serverhello,
+    record_size_limit_parse_clienthello,
+    record_size_limit_add_serverhello,
+  },
 };
 
 #define kNumExtensions (sizeof(kExtensions) / sizeof(struct tls_extension))
@@ -3334,6 +3381,12 @@ static_assert(kNumExtensions <=
 
 bool ssl_setup_extension_permutation(SSL_HANDSHAKE *hs) {
   if (!hs->config->permute_extensions) {
+      if (!hs->ssl->ctx->extension_permutation.empty()) {
+          Array<uint8_t> permutation;
+          permutation.Init(hs->ssl->ctx->extension_permutation.size());
+          permutation.CopyFrom(hs->ssl->ctx->extension_permutation);
+          hs->extension_permutation = std::move(permutation);
+      }
     return true;
   }
 
@@ -3410,11 +3463,16 @@ static bool ssl_add_clienthello_tlsext_inner(SSL_HANDSHAKE *hs, CBB *out,
       return false;
     }
   }
-
-  for (size_t unpermuted = 0; unpermuted < kNumExtensions; unpermuted++) {
+  const size_t numExtensions = hs->extension_permutation.empty()
+      ? kNumExtensions
+      : hs->extension_permutation.size();
+  for (size_t unpermuted = 0; unpermuted < numExtensions; unpermuted++) {
     size_t i = hs->extension_permutation.empty()
                    ? unpermuted
                    : hs->extension_permutation[unpermuted];
+    if (i >= kNumExtensions) {
+        continue;
+    }
     const size_t len_before = CBB_len(&extensions);
     const size_t len_compressed_before = CBB_len(compressed.get());
     if (!kExtensions[i].add_clienthello(hs, &extensions, compressed.get(),
@@ -3471,20 +3529,18 @@ static bool ssl_add_clienthello_tlsext_inner(SSL_HANDSHAKE *hs, CBB *out,
       return false;
     }
   }
-
   // The PSK extension must be last. It is never compressed. Note, if there is a
   // binder, the caller will need to update both ClientHelloInner and
   // EncodedClientHelloInner after computing it.
-  const size_t len_before = CBB_len(&extensions);
-  if (!ext_pre_shared_key_add_clienthello(hs, &extensions, out_needs_psk_binder,
-                                          ssl_client_hello_inner) ||
-      !CBB_add_bytes(&extensions_encoded, CBB_data(&extensions) + len_before,
-                     CBB_len(&extensions) - len_before) ||
-      !CBB_flush(out) ||  //
-      !CBB_flush(out_encoded)) {
-    return false;
-  }
-
+    const size_t len_before = CBB_len(&extensions);
+    if (!ext_pre_shared_key_add_clienthello(hs, &extensions, out_needs_psk_binder,
+        ssl_client_hello_inner) ||
+        !CBB_add_bytes(&extensions_encoded, CBB_data(&extensions) + len_before,
+            CBB_len(&extensions) - len_before) ||
+        !CBB_flush(out) ||  //
+        !CBB_flush(out_encoded)) {
+        return false;
+    }
   return true;
 }
 
@@ -3520,10 +3576,22 @@ bool ssl_add_clienthello_tlsext(SSL_HANDSHAKE *hs, CBB *out, CBB *out_encoded,
   }
 
   bool last_was_empty = false;
-  for (size_t unpermuted = 0; unpermuted < kNumExtensions; unpermuted++) {
+  bool hasPreSharedKey = false;
+  const size_t numExtensions = hs->extension_permutation.empty()
+      ? kNumExtensions
+      : hs->extension_permutation.size();
+  for (size_t unpermuted = 0; unpermuted < numExtensions; unpermuted++) {
     size_t i = hs->extension_permutation.empty()
                    ? unpermuted
                    : hs->extension_permutation[unpermuted];
+    if (i == 126)
+    {
+        hasPreSharedKey = true;
+        continue;
+    }
+    if (i >= kNumExtensions) {
+        continue;
+    }
     const size_t len_before = CBB_len(&extensions);
     if (!kExtensions[i].add_clienthello(hs, &extensions, &extensions, type)) {
       OPENSSL_PUT_ERROR(SSL, SSL_R_ERROR_ADDING_EXTENSION);
@@ -3596,16 +3664,19 @@ bool ssl_add_clienthello_tlsext(SSL_HANDSHAKE *hs, CBB *out, CBB *out_encoded,
     }
   }
 
-  // The PSK extension must be last, including after the padding.
-  const size_t len_before = CBB_len(&extensions);
-  if (!ext_pre_shared_key_add_clienthello(hs, &extensions, out_needs_psk_binder,
-                                          type)) {
-    OPENSSL_PUT_ERROR(SSL, ERR_R_INTERNAL_ERROR);
-    return false;
+  if (hasPreSharedKey)
+  {
+      // The PSK extension must be last, including after the padding.
+      const size_t len_before = CBB_len(&extensions);
+      if (!ext_pre_shared_key_add_clienthello(hs, &extensions, out_needs_psk_binder,
+          type)) {
+          OPENSSL_PUT_ERROR(SSL, ERR_R_INTERNAL_ERROR);
+          return false;
+      }
+      assert(psk_extension_len == CBB_len(&extensions) - len_before);
+      (void)len_before;  // |assert| is omitted in release builds.
   }
-  assert(psk_extension_len == CBB_len(&extensions) - len_before);
-  (void)len_before;  // |assert| is omitted in release builds.
-
+    
   // Discard empty extensions blocks.
   if (CBB_len(&extensions) == 0) {
     CBB_discard_child(out);
diff --git a/ssl/handshake_client.cc b/ssl/handshake_client.cc
index 776e7809e..b252e26e1 100644
--- a/ssl/handshake_client.cc
+++ b/ssl/handshake_client.cc
@@ -243,37 +243,48 @@ static bool ssl_write_client_cipher_list(const SSL_HANDSHAKE *hs, CBB *out,
   // Add TLS 1.3 ciphers. Order ChaCha20-Poly1305 relative to AES-GCM based on
   // hardware support.
   if (hs->max_version >= TLS1_3_VERSION) {
-    static const uint16_t kCiphersNoAESHardware[] = {
-        TLS1_3_CK_CHACHA20_POLY1305_SHA256 & 0xffff,
-        TLS1_3_CK_AES_128_GCM_SHA256 & 0xffff,
-        TLS1_3_CK_AES_256_GCM_SHA384 & 0xffff,
-    };
-    static const uint16_t kCiphersAESHardware[] = {
-        TLS1_3_CK_AES_128_GCM_SHA256 & 0xffff,
-        TLS1_3_CK_AES_256_GCM_SHA384 & 0xffff,
-        TLS1_3_CK_CHACHA20_POLY1305_SHA256 & 0xffff,
-    };
-    static const uint16_t kCiphersCNSA[] = {
-        TLS1_3_CK_AES_256_GCM_SHA384 & 0xffff,
-        TLS1_3_CK_AES_128_GCM_SHA256 & 0xffff,
-        TLS1_3_CK_CHACHA20_POLY1305_SHA256 & 0xffff,
-    };
-
-    const bool has_aes_hw = ssl->config->aes_hw_override
-                                ? ssl->config->aes_hw_override_value
-                                : EVP_has_aes_hardware();
-    const bssl::Span<const uint16_t> ciphers =
-        ssl->config->tls13_cipher_policy == ssl_compliance_policy_cnsa_202407
-            ? bssl::Span<const uint16_t>(kCiphersCNSA)
-            : (has_aes_hw ? bssl::Span<const uint16_t>(kCiphersAESHardware)
-                          : bssl::Span<const uint16_t>(kCiphersNoAESHardware));
-
-    for (auto cipher : ciphers) {
-      if (!ssl_add_tls13_cipher(&child, cipher,
-                                ssl->config->tls13_cipher_policy)) {
-        return false;
-      }
+     if (!ssl->ctx->cipher13_flag_list.empty()) {
+        for (uint8_t flag : ssl->ctx->cipher13_flag_list) {
+            int id = 0;
+            switch (flag) {
+            case 1:
+                id = TLS1_3_CK_AES_128_GCM_SHA256;
+                break;
+            case 2:
+                id = TLS1_3_CK_AES_256_GCM_SHA384;
+                break;
+            case 3:
+                id = TLS1_3_CK_CHACHA20_POLY1305_SHA256;
+                break;
+            default:
+                return false;
+            }
+            if (!CBB_add_u16(&child, id & 0xffff)) {
+                return false;
+            }
+        }
+    }
+    else {
+        const bool has_aes_hw = ssl->config->aes_hw_override
+            ? ssl->config->aes_hw_override_value
+            : EVP_has_aes_hardware();
+
+        if ((!has_aes_hw &&  //
+            !ssl_add_tls13_cipher(&child,
+                TLS1_3_CK_CHACHA20_POLY1305_SHA256 & 0xffff,
+                ssl->config->tls13_cipher_policy)) ||
+            !ssl_add_tls13_cipher(&child, TLS1_3_CK_AES_128_GCM_SHA256 & 0xffff,
+                ssl->config->tls13_cipher_policy) ||
+            !ssl_add_tls13_cipher(&child, TLS1_3_CK_AES_256_GCM_SHA384 & 0xffff,
+                ssl->config->tls13_cipher_policy) ||
+            (has_aes_hw &&  //
+                !ssl_add_tls13_cipher(&child,
+                    TLS1_3_CK_CHACHA20_POLY1305_SHA256 & 0xffff,
+                    ssl->config->tls13_cipher_policy))) {
+            return false;
+        }
     }
+    
   }
 
   if (hs->min_version < TLS1_3_VERSION && type != ssl_client_hello_inner) {
@@ -474,7 +485,6 @@ void ssl_done_writing_client_hello(SSL_HANDSHAKE *hs) {
 
 static enum ssl_hs_wait_t do_start_connect(SSL_HANDSHAKE *hs) {
   SSL *const ssl = hs->ssl;
-
   ssl_do_info_callback(ssl, SSL_CB_HANDSHAKE_START, 1);
   // |session_reused| must be reset in case this is a renegotiation.
   ssl->s3->session_reused = false;
@@ -555,7 +565,6 @@ static enum ssl_hs_wait_t do_start_connect(SSL_HANDSHAKE *hs) {
   } else {
     hs->early_data_offered = true;
   }
-
   if (!ssl_setup_key_shares(hs, /*override_group_id=*/0) ||
       !ssl_setup_extension_permutation(hs) ||
       !ssl_encrypt_client_hello(hs, MakeConstSpan(ech_enc, ech_enc_len)) ||
diff --git a/ssl/internal.h b/ssl/internal.h
index 97c9ed1ef..5d80497f9 100644
--- a/ssl/internal.h
+++ b/ssl/internal.h
@@ -889,8 +889,9 @@ BSSL_NAMESPACE_BEGIN
 // Bits for |algorithm_mac| (symmetric authentication).
 #define SSL_SHA1 0x00000001u
 #define SSL_SHA256 0x00000002u
+#define SSL_SHA384 0x00000004u
 // SSL_AEAD is set for all AEADs.
-#define SSL_AEAD 0x00000004u
+#define SSL_AEAD 0x00000008u
 
 // Bits for |algorithm_prf| (handshake digest).
 #define SSL_HANDSHAKE_MAC_DEFAULT 0x1
@@ -4369,6 +4370,8 @@ struct ssl_ctx_st : public bssl::RefCounted<ssl_ctx_st> {
   // |aes_hw_override| is true.
   bool aes_hw_override_value : 1;
 
+  bssl::Array<uint8_t> cipher13_flag_list;
+  bssl::Array<uint8_t> extension_permutation;
  private:
   friend RefCounted;
   ~ssl_ctx_st();
diff --git a/ssl/ssl_cipher.cc b/ssl/ssl_cipher.cc
index 220087a96..5d62029f7 100644
--- a/ssl/ssl_cipher.cc
+++ b/ssl/ssl_cipher.cc
@@ -197,6 +197,64 @@ static constexpr SSL_CIPHER kCiphers[] = {
         SSL_HANDSHAKE_MAC_DEFAULT,
     },
 
+    // Cipher 39
+    {
+    TLS1_TXT_DHE_RSA_WITH_AES_256_SHA,
+    "TLS_DHE_RSA_WITH_AES_256_SHA",
+    TLS1_CK_DHE_RSA_WITH_AES_256_SHA,
+    SSL_kRSA,
+    SSL_aRSA_DECRYPT,
+    SSL_AES256,
+    SSL_SHA1,
+    SSL_HANDSHAKE_MAC_DEFAULT,
+    },
+    
+        // Cipher 3C
+    {
+    TLS1_TXT_RSA_WITH_AES_128_SHA256,
+    "TLS_RSA_WITH_AES_128_SHA256",
+    TLS1_CK_RSA_WITH_AES_128_SHA256,
+    SSL_kRSA,
+    SSL_aRSA_DECRYPT,
+    SSL_AES256,
+    SSL_SHA1,
+    SSL_HANDSHAKE_MAC_DEFAULT,
+    },
+        // Cipher 3D
+    {
+    TLS1_TXT_RSA_WITH_AES_256_SHA256,
+    "TLS_RSA_WITH_AES_256_SHA256",
+    TLS1_CK_RSA_WITH_AES_256_SHA256,
+    SSL_kRSA,
+    SSL_aRSA_DECRYPT,
+    SSL_AES256,
+    SSL_SHA1,
+    SSL_HANDSHAKE_MAC_DEFAULT,
+    },
+    
+        // Cipher 67
+    {
+    TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256,
+    "TLS_DHE_RSA_WITH_AES_128_SHA256",
+    TLS1_CK_DHE_RSA_WITH_AES_128_SHA256,
+    SSL_kRSA,
+    SSL_aRSA_DECRYPT,
+    SSL_AES128,
+    SSL_SHA1,
+    SSL_HANDSHAKE_MAC_DEFAULT,
+    },
+    
+        // Cipher 6B
+    {
+    TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256,
+    "TLS_DHE_RSA_WITH_AES_256_SHA256",
+    TLS1_CK_DHE_RSA_WITH_AES_256_SHA256,
+    SSL_kRSA,
+    SSL_aRSA_DECRYPT,
+    SSL_AES256,
+    SSL_SHA1,
+    SSL_HANDSHAKE_MAC_DEFAULT,
+     },
     // PSK cipher suites.
 
     // Cipher 8C
@@ -248,7 +306,29 @@ static constexpr SSL_CIPHER kCiphers[] = {
         SSL_AEAD,
         SSL_HANDSHAKE_MAC_SHA384,
     },
-
+        // Cipher 9E
+    {
+    TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256,
+    "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
+    TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256,
+    SSL_kECDHE,
+    SSL_aGENERIC,
+    SSL_AES128GCM,
+    SSL_AEAD,
+    SSL_HANDSHAKE_MAC_SHA256,
+    },
+        
+    // Cipher 9F
+    {
+    TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384,
+    "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
+    TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384,
+    SSL_kECDHE,
+    SSL_aGENERIC,
+    SSL_AES256GCM,
+    SSL_AEAD,
+    SSL_HANDSHAKE_MAC_SHA384,
+    },
     // TLS 1.3 suites.
 
     // Cipher 1301
@@ -287,6 +367,17 @@ static constexpr SSL_CIPHER kCiphers[] = {
         SSL_HANDSHAKE_MAC_SHA256,
     },
 
+    // Cipher C008
+    {
+    "ECDHE-ECDSA-DES-CBC3-SHA",
+    "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA",
+    0x0300C008,
+    SSL_kECDHE,
+    SSL_aECDSA,
+    SSL_3DES,
+    SSL_SHA1,
+    SSL_HANDSHAKE_MAC_DEFAULT,
+    },
     // Cipher C009
     {
         TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
@@ -311,6 +402,17 @@ static constexpr SSL_CIPHER kCiphers[] = {
         SSL_HANDSHAKE_MAC_DEFAULT,
     },
 
+    // Cipher C012
+    {
+    "ECDHE-RSA-DES-CBC3-SHA",
+    "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA",
+    0x0300C012,
+    SSL_kECDHE,
+    SSL_aRSA_DECRYPT,
+    SSL_3DES,
+    SSL_SHA1,
+    SSL_HANDSHAKE_MAC_DEFAULT,
+     },
     // Cipher C013
     {
         TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA,
@@ -335,6 +437,37 @@ static constexpr SSL_CIPHER kCiphers[] = {
         SSL_HANDSHAKE_MAC_DEFAULT,
     },
 
+       // curl-impersonate: Ciphers C023, C024, C027, C028 were removed in
+      // https://boringssl-review.googlesource.com/c/boringssl/+/27944/
+              // but restored here to impersonate browsers with older ciphers. They
+              // are
+              // not expected to actually work; but just to be included in the TLS
+              // Client Hello.
+              // HMAC based TLS v1.2 ciphersuites from RFC5289
+              // Cipher C023
+    {
+    TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256,
+    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
+    TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256,
+    SSL_kECDHE,
+    SSL_aECDSA,
+    SSL_AES128,
+    SSL_SHA256,
+    SSL_HANDSHAKE_MAC_SHA256,
+    },
+          
+    // Cipher C024
+              
+    {
+    TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384,
+    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
+    TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384,
+    SSL_kECDHE,
+    SSL_aECDSA,
+    SSL_AES256,
+    SSL_SHA384,
+    SSL_HANDSHAKE_MAC_SHA384,
+    },
     // Cipher C027
     {
         TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
@@ -346,6 +479,17 @@ static constexpr SSL_CIPHER kCiphers[] = {
         SSL_SHA256,
         SSL_HANDSHAKE_MAC_SHA256,
     },
+    // Cipher C028
+    {
+    TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384,
+    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
+    TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384,
+    SSL_kECDHE,
+    SSL_aRSA_DECRYPT,
+    SSL_AES256,
+    SSL_SHA384,
+    SSL_HANDSHAKE_MAC_SHA384,
+    },
 
     // GCM based TLS v1.2 ciphersuites from RFC 5289
 
@@ -467,15 +611,15 @@ Span<const SSL_CIPHER> AllCiphers() {
   return MakeConstSpan(kCiphers, OPENSSL_ARRAY_SIZE(kCiphers));
 }
 
-static constexpr size_t NumTLS13Ciphers() {
-  size_t num = 0;
-  for (const auto &cipher : kCiphers) {
-    if (cipher.algorithm_mkey == SSL_kGENERIC) {
-      num++;
-    }
-  }
-  return num;
-}
+//static constexpr size_t NumTLS13Ciphers() {
+//  size_t num = 0;
+//  for (const auto &cipher : kCiphers) {
+//    if (cipher.algorithm_mkey == SSL_kGENERIC) {
+//      num++;
+//    }
+//  }
+//  return num;
+//}
 
 #define CIPHER_ADD 1
 #define CIPHER_KILL 2
@@ -567,8 +711,11 @@ static const CIPHER_ALIAS kCipherAliases[] = {
 
     // Temporary no-op aliases corresponding to removed SHA-2 legacy CBC
     // ciphers. These should be removed after 2018-05-14.
-    {"SHA256", 0, 0, 0, 0, 0},
-    {"SHA384", 0, 0, 0, 0, 0},
+    /*{"SHA256", 0, 0, 0, 0, 0},
+    {"SHA384", 0, 0, 0, 0, 0},*/
+
+    {"SHA256", ~0u, ~0u, ~0u, SSL_SHA256, 0},
+    {"SHA384", ~0u, ~0u, ~0u, SSL_SHA384, 0},
 };
 
 static const size_t kCipherAliasesLen = OPENSSL_ARRAY_SIZE(kCipherAliases);
@@ -1202,9 +1349,9 @@ bool ssl_create_cipher_list(UniquePtr<SSLCipherPreferenceList> *out_cipher_list,
     assert(co_list[num - 1].cipher != nullptr);
   }
   assert(num == OPENSSL_ARRAY_SIZE(co_list));
-  static_assert(OPENSSL_ARRAY_SIZE(co_list) + NumTLS13Ciphers() ==
+  /*static_assert(OPENSSL_ARRAY_SIZE(co_list) + NumTLS13Ciphers() ==
                     OPENSSL_ARRAY_SIZE(kCiphers),
-                "Not all ciphers are included in the cipher order");
+                "Not all ciphers are included in the cipher order");*/
 
   // If the rule_string begins with DEFAULT, apply the default rule before
   // using the (possibly available) additional rules.
diff --git a/ssl/ssl_key_share.cc b/ssl/ssl_key_share.cc
index d8355596f..a36dcbfb6 100644
--- a/ssl/ssl_key_share.cc
+++ b/ssl/ssl_key_share.cc
@@ -384,6 +384,10 @@ constexpr NamedGroup kNamedGroups[] = {
     {NID_X25519Kyber768Draft00, SSL_GROUP_X25519_KYBER768_DRAFT00,
      "X25519Kyber768Draft00", ""},
     {NID_X25519MLKEM768, SSL_GROUP_X25519_MLKEM768, "X25519MLKEM768", ""},
+
+    //unspport group but add them
+    {NID_secp224r1, 256, "dhe2048", "ffdhe2048"},
+    {NID_secp224r1, 257, "dhe3072", "ffdhe3072"},
 };
 
 }  // namespace
diff --git a/ssl/ssl_lib.cc b/ssl/ssl_lib.cc
index c38a96bb4..f4d86c1f3 100644
--- a/ssl/ssl_lib.cc
+++ b/ssl/ssl_lib.cc
@@ -685,6 +685,13 @@ SSL *SSL_new(SSL_CTX *ctx) {
   ssl->config->ocsp_stapling_enabled = ctx->ocsp_stapling_enabled;
   ssl->config->handoff = ctx->handoff;
   ssl->quic_method = ctx->quic_method;
+  SSL_enable_ocsp_stapling(ssl.get());
+  SSL_add_application_settings(ssl.get(),
+      reinterpret_cast<const uint8_t*>("h2"),
+      2, NULL, 0);
+  SSL_CTX_set_grease_enabled(ssl->ctx.get(), 1);
+  SSL_enable_signed_cert_timestamps(ssl.get());
+  SSL_set_enable_ech_grease(ssl.get(), 1);
 
   if (!ssl->method->ssl_new(ssl.get()) ||
       !ssl->ctx->x509_method->ssl_new(ssl->s3->hs.get())) {
@@ -3374,7 +3381,6 @@ static int Configure(SSL_CTX *ctx) {
 
 static int Configure(SSL *ssl) {
   ssl->config->tls13_cipher_policy = ssl_compliance_policy_wpa3_192_202304;
-
   return SSL_set_min_proto_version(ssl, TLS1_2_VERSION) &&
          SSL_set_max_proto_version(ssl, TLS1_3_VERSION) &&
          SSL_set_strict_cipher_list(ssl, kTLS12Ciphers) &&
@@ -3427,3 +3433,33 @@ int SSL_set_compliance_policy(SSL *ssl, enum ssl_compliance_policy_t policy) {
       return 0;
   }
 }
+
+int SSL_CTX_set_ciphersuites(SSL_CTX *ctx, char *str) {
+  if (!str) {
+    return 0;
+  }
+  bssl::Array<uint8_t> arr;
+  arr.Init(strlen(str));
+  int i = 0;
+  const char *l = str;
+  do {
+    arr[i++] = *l;
+  } while (*++l != '\0');
+  ctx->cipher13_flag_list = std::move(arr);
+  return ctx->cipher13_flag_list.empty() ? 0 : 1;
+}
+
+int SSL_CTX_set_extension_permutation(SSL_CTX *ctx, char *str) {
+  if (!str) {
+    return 0;
+  }
+  bssl::Array<uint8_t> arr;
+  arr.Init(strlen(str));
+  int i = 0;
+  const char *l = str;
+  do {
+    arr[i++] = *l - 1;
+  } while (*++l != '\0');
+  ctx->extension_permutation = std::move(arr);
+  return ctx->extension_permutation.empty() ? 0 : 1;
+}
diff --git a/tool/server.cc b/tool/server.cc
index ebecee03d..a4b29c5aa 100644
--- a/tool/server.cc
+++ b/tool/server.cc
@@ -243,7 +243,7 @@ bool Server(const std::vector<std::string> &args) {
   }
 
   bssl::UniquePtr<SSL_CTX> ctx(SSL_CTX_new(TLS_method()));
-
+  SSL_CTX_set_permute_extensions(ctx.get(), 1);
   const char *keylog_file = getenv("SSLKEYLOGFILE");
   if (keylog_file) {
     g_keylog_file = fopen(keylog_file, "a");
