name: Publish curl module

permissions:
  contents: write
  id-token: write

on:
  push:
    tags:
      - v*
env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-x86_64-unknown-linux-gnu:
    name: Build (x86_64-unknown-linux-gnu)
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build the Docker image
        run: docker build . -f Dockerfile-x86_64-unknown-linux-gnu -t curl_x86_64-unknown-linux-gnu

      - name: Run the Docker container
        run: docker run --rm -v ./output:/output curl_x86_64-unknown-linux-gnu
      
      - name: Compress as tar
        run: |
          tar -czf ./curl_x86_64-unknown-linux-gnu.tar.gz -C ./output .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: curl_x86_64-unknown-linux-gnu.tar.gz
          path: ./output

  build-x86_64-pc-windows-msvc:
    name: Build (x86_64-pc-windows-msvc)
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build the Docker image
        run: docker build . -f Dockerfile-x86_64-pc-windows-msvc -t curl_x86_64-pc-windows-msvc

      - name: Run the Docker container
        run: docker run --name win_docker curl_x86_64-pc-windows-msvc
      
      - name: Copy file from the Docker container
        run: |
          mkdir ./output
          docker cp win_docker:/home/wine/.wine/drive_c/curl/build/lib/libcurl.dll ./output
          docker cp win_docker:/home/wine/.wine/drive_c/curl/build/lib/libcurl_imp.lib ./output
      
      - name: Compress as tar
        run: |
          tar -czf ./curl_x86_64-pc-windows-msvc.tar.gz -C ./output .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: curl_x86_64-pc-windows-msvc.tar.gz
          path: ./output

  build-x86_64-apple-darwin:
    name: Build (x86_64-apple-darwin)
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build the Docker image
        run: docker build . -f Dockerfile-x86_64-apple-darwin -t curl_x86_64-apple-darwin

      - name: Run the Docker container
        run: docker run --rm -v ./output:/output curl_x86_64-apple-darwin
      
      - name: Compress as tar
        run: |
          tar -czf ./curl_x86_64-apple-darwin.tar.gz -C ./output .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: curl_x86_64-apple-darwin.tar.gz
          path: ./output

  build-arm64-apple-darwin:
      name: Build (arm64-apple-darwin)
      runs-on: ubuntu-latest

      steps:
        - name: Check out the repository
          uses: actions/checkout@v2

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Build the Docker image
          run: docker build . -f Dockerfile-arm64-apple-darwin -t curl_arm64-apple-darwin

        - name: Run the Docker container
          run: docker run --rm -v ./output:/output curl_arm64-apple-darwin
        
        - name: Compress as tar
          run: |
            tar -czf ./curl_arm64-apple-darwin.tar.gz -C ./output .

        - name: Upload build artifacts
          uses: actions/upload-artifact@v3
          with:
            name: curl_arm64-apple-darwin.tar.gz
            path: ./output
  
  release:
    runs-on: ubuntu-latest
    needs: [build-x86_64-unknown-linux-gnu,build-x86_64-pc-windows-msvc,build-x86_64-apple-darwin,build-arm64-apple-darwin]

    steps:
      # 检出代码
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set Release name
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          prerelease: false

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: curl_x86_64-unknown-linux-gnu.tar.gz
          path: ./curl_x86_64-unknown-linux-gnu
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: curl_x86_64-pc-windows-msvc.tar.gz
          path: ./curl_x86_64-pc-windows-msvc
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: curl_x86_64-apple-darwin.tar.gz
          path: ./curl_x86_64-apple-darwin
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: curl_arm64-apple-darwin.tar.gz
          path: ./curl_arm64-apple-darwin
          
      - name: Compress as tar
        run: |
          tar -czf ./output/curl_x86_64-unknown-linux-gnu.tar.gz -C ./curl_x86_64-unknown-linux-gnu .
          tar -czf ./output/curl_x86_64-pc-windows-msvc.tar.gz -C ./curl_x86_64-pc-windows-msvc .
          tar -czf ./output/curl_x86_64-apple-darwin.tar.gz -C ./curl_x86_64-apple-darwin .
          tar -czf ./output/curl_arm64-apple-darwin.tar.gz -C ./curl_arm64-apple-darwin .

      - name: list and Release Assets
        run: |
          ls ./output -al &&
           for file in ./output/*; do
            gh release upload $RELEASE_VERSION $file --clobber
          done
        env: 
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
